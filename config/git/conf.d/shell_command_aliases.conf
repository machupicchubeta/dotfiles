[alias]
  cb = "!f() { git checkout -b `date +%Y%m%d%H%M_`$1; }; f"
  ch- = "!f() { git checkout $(git branch | grep --invert-match \"`git show-default-branch`\" | fzf); }; f"
  changelog = "!f() { git tag | grep RELEASE | tail --lines=1 | xargs -I{} git log {}...\"`git symbolic-ref --short refs/remotes/origin/HEAD | sed 's@^origin/@@'`\" --oneline | grep 'Merge pull request' | awk '{ print $1 }' | emojify | xargs git show; }; f;"
  chb-origin = "!f() { git branch --remotes | grep origin | grep --invert-match \"`git show-default-branch`\" | fzf | sed 's/origin\\///' | xargs -I {} git checkout -b {} origin/{}; }; f"
  chb-upstream = "!f() { git branch --remotes | grep upstream | grep --invert-match \"`git show-default-branch`\" | fzf | sed 's/upstream\\///' | xargs -I {} git checkout -b {} upstream/{}; }; f"
  checkout-default-branch = "!f() { git checkout $(git show-default-branch); }; f"
  dct = "!f() { git describe --tags $(git rev-list --tags --max-count=1); }; f"
  fg = '!f() { git ls-files | grep; }; f'
  ignored = "!f() { git ls-files -v | grep \"^[[:lower:]]\"; }; f"
  l1 = ! git log --oneline --color | emojify | less --raw-control-chars
  lg = ! git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative --color | emojify | less --raw-control-chars
  lga = ! git log --graph --all --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative --color | emojify | less --raw-control-chars
  main = "!f() { git switch $(git show-default-branch); }; f"
  merged = "!f() { git branch --no-color --remotes --merged | grep --invert-match \"`git symbolic-ref --short refs/remotes/origin/HEAD | sed 's@^origin/@@'`\" | sed 's/origin\\///'; }; f"
  mom = "!f() { git merge origin/$(git show-default-branch); }; f"
  mum = '!f() { git merge upstream/$(git show-default-branch); }; f'
  plo = "!f() { git pull origin $(git branch --show-current); }; f"
  plu = "!f() { git pull upstream $(git branch --show-current); }; f"
  plum = "!f() { git pull upstream $(git show-default-branch); }; f"
  prom = "!f() { git pull --rebase origin $(git show-default-branch); }; f"
  promi = "!f() { git pull --rebase=interactive origin $(git show-default-branch); }; f"
  prr-upstream = "!f() { git checkout $(git show-default-branch) && git pull --rebase --prune upstream $(git show-default-branch); }; f"
  ps- = "!f() { git push $1 $(git branch --show-current); }; f"
  psf- = "!f() { git push --force-with-lease --force-if-includes $1 $(git branch --show-current); }; f"
  psfo = "!f() { git push --force-with-lease --force-if-includes origin $(git branch --show-current); }; f"
  pso = "!f() { git push origin $(git branch --show-current); }; f"
  psupo = '!f() { git push --set-upstream origin $(git branch --show-current); }; f'
  rbm = "!f() { git rebase $(git show-default-branch); }; f"
  rbom = "!f() { git rebase origin/$(git show-default-branch); }; f"
  release-branch = "!f() { git checkout -b release_$(date +%Y%m%d_%H%M); }; f"
  release-tag = "!f() { git tag RELEASE_$(date +%Y%m%d_%H%M); }; f"
  rhho = "!f() { git reset origin/$(git branch --show-current) --hard; }; f"
  root = "!f() { cd \"$(git rev-parse --show-toplevel || echo .)\"; }; f"
  rt = "!f() { cd \"$(git rev-parse --show-toplevel || echo .)\"; }; f"
  show-default-branch = "!f() { git symbolic-ref --short refs/remotes/origin/HEAD | sed 's@^origin/@@'; }; f"
  sup = "!f() { git branch --set-upstream-to=origin/$(git branch --show-current); }; f"
  sweep = "!f() { git branch --no-color --merged | grep --invert-match \"`git symbolic-ref --short refs/remotes/origin/HEAD | sed 's@^origin/@@'`\" | xargs -n 1 git branch --delete --force; }; f"
  ts = "!f() { git tag | sort --version-sort; }; f"
  unwip = "!f() { git rev-list --max-count=1 --format=\"%s\" HEAD | grep -q \"--wip--\" && git reset HEAD~1; }; f"
 wip = '!f() { git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message "--wip-- [skip ci]"; }; f'
